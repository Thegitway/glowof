{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/Home.js","components/FetchData.js","components/Counter.js","pages/details.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Box","styled","div","Pic","img","NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","style","height","src","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","PicBox","Pub","Text","Home","FetchData","data","loading","populate","contents","renderForecastsTable","id","a","fetch","response","json","map","forecast","description","price","stock","Counter","currentCount","incrementCounter","Scaffold","Image","Column","Row","Title","h1","Price","Info","rotate","keyframes","Details","flex","App","exact","path","component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b1576c9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\nimport User from './User';\r\nimport styled from 'styled-components';\r\n\r\nconst Box=styled.div`\r\ndisplay:flex;\r\nflex-direction:column;\r\nborder: 1px;\r\nborder-color: black;\r\nborder-style: dotted;\r\nborder-radius: 20px;\r\n`\r\nconst Pic=styled.img`\r\nobject-fit: fill;\r\nborder-radius: 19px;\r\nheight: 20vh;\r\n`\r\nexport class NavMenu extends Component {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header>\r\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-0\" light>\r\n          <Container>\r\n            <NavbarBrand tag={Link} to=\"/\"><img style={{\r\n              \r\n              height:\"20vh\",\r\n            }} src=\"logo.png\" /></NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\"\r\n             isOpen={!this.state.collapsed} navbar>\r\n              <ul className=\"navbar-nav flex-grow\">\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                </NavItem>\r\n               \r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Products</NavLink>\r\n                </NavItem>\r\n              </ul>\r\n            </Collapse>\r\n            \r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/description\">\r\n                    <Box><Pic src=\"user.png\"/></Box>\r\n                  </NavLink>\r\n                \r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n          {this.props.children}\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Pic=styled.img`\r\nflex:1;\r\nwidth: 30vw;\r\npadding: 4%;\r\nborder-radius: 20px;\r\n`\r\nconst Box=styled.div`\r\nbackground-color:pink;\r\n      height:100vh;\r\n      width:100vw;\r\n      display:flex;\r\n     flex-direction:column;\r\n    align-items:center;\r\n     justify-content:center;\r\n`\r\n\r\nconst PicBox=styled.div`\r\nflex:1;\r\ndisplay:flex;\r\nflex-direction:column;\r\n height:60vh;\r\n align-items:center;\r\n  justify-content:center;\r\n`\r\n\r\nconst Pub=styled.div`\r\ndisplay:flex;\r\n\r\n`\r\nconst Text=styled.div`\r\npadding:0% 4% 0% 9%;`\r\n\r\nexport class Home extends Component {\r\n  static displayName = Home.name;\r\n\r\n  render () {\r\n    return (\r\n      <Box>\r\n        <h1 >Welcome to GlowOf</h1>\r\n        <p>Hello World</p>\r\n        <Pub>\r\n        <PicBox >\r\n<Pic src=\"pro1.png\"></Pic>\r\n<Text >Free gifts | Save on your skin &amp; body faves while bagging some incredible free treats</Text>\r\n        </PicBox>\r\n        <PicBox>\r\n<Pic src=\"pro2.png\"></Pic>\r\n<Text >Free gifts | Save on your skin &amp; body faves while bagging some incredible free treats</Text>\r\n\r\n        </PicBox>\r\n        <PicBox>\r\n<Pic src=\"pro3.png\"></Pic>\r\n<Text >Free gifts | Save on your skin &amp; body faves while bagging some incredible free treats</Text>\r\n\r\n        </PicBox>\r\n        </Pub>\r\n      </Box>\r\n    ); \r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class FetchData extends Component {\r\n  static displayName = FetchData.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data: [], loading: true };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populate();\r\n  }\r\n\r\n  static renderForecastsTable(data) {\r\n    return (\r\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Description</th>\r\n            <th>Price (DH)</th>\r\n            <th>Quantite</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map(forecast =>\r\n            <tr key={forecast.id}>\r\n              <td>{forecast.name}</td>\r\n              <td>{forecast.description}</td>\r\n              <td>{forecast.price}</td>\r\n              <td>{forecast.stock}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let contents = this.state.loading\r\n      ? <p><em>Loading...</em></p>\r\n      : FetchData.renderForecastsTable(this.state.data);\r\n\r\n    return (\r\n      <div>\r\n        <h1 id=\"tabelLabel\" >Glowof Product</h1>\r\n        <p>This component demonstrates fetching data from the server.</p>\r\n        {contents}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async populate() {\r\n    const response = await fetch('http://20.101.92.75/product');\r\n    const data = await response.json();\r\n    this.setState({ data: data, loading: false });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class Counter extends Component {\r\n  static displayName = Counter.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { currentCount: 0 };\r\n    this.incrementCounter = this.incrementCounter.bind(this);\r\n  }\r\n\r\n  incrementCounter() {\r\n    this.setState({\r\n      currentCount: this.state.currentCount + 1\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Counter</h1>\r\n\r\n        <p>This is a simple example of a React component.</p>\r\n\r\n        <p aria-live=\"polite\">Current count: <strong>{this.state.currentCount}</strong></p>\r\n\r\n        <button className=\"btn btn-primary\" onClick={this.incrementCounter}>Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","\r\nimport styled,{keyframes} from \"styled-components\"\r\n\r\n\r\nconst Scaffold=styled.div`\r\nwidth: 90vw;\r\nheight: 90vh;\r\nbackground-color: white;\r\n`\r\n\r\nconst Image=styled.img`\r\n   object-fit:cover;\r\n  width: 40vw;\r\n  height: 90vh;\r\n  border-radius: 0px;\r\n`\r\n\r\nconst Column=styled.div`\r\ndisplay: flex;\r\nmargin-left: 5%;\r\njustify-content: start;\r\nalign-items: start;\r\nflex-direction: column;\r\n`\r\nconst Row=styled.div`\r\ndisplay: flex;\r\npadding:3%;\r\njustify-content: space-between;\r\nalign-items: flex-start;\r\n`\r\nconst Title=styled.h1`\r\nfont-family: Georgia, 'Times New Roman', Times, serif;\r\nfont-weight: 200;\r\n`\r\nconst Price=styled.div`\r\nfont-weight: 100;\r\nfont-size: 40px;\r\nfont-family: Georgia, 'Times New Roman', Times, serif;\r\n\r\n`\r\nconst Info=styled.div`\r\nmargin: 10px 0px;\r\nfont-family: Georgia, 'Times New Roman', Times, serif;\r\n\r\n`\r\nconst ContainerImage=styled.div`\r\ndisplay: flex;\r\nmargin-top: 5%;\r\nalign-items: center;\r\njustify-content: center;\r\n`\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\nconst Rotate = styled.div`\r\n  display: inline-block;\r\n  animation: ${rotate} 2s linear infinite;\r\n  padding: 8rem 1rem;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nexport default function Details() {\r\n \r\n \r\n  \r\n  return (\r\n    <Scaffold>\r\n    <Row>\r\n    <Image flex=\"1\" src={\"user.png\"}/>\r\n   <Column>\r\n    <Title >\r\n      OUMAIMA AFRAOUI\r\n    </Title>\r\n    <Info>\r\n    A princess is the daughter of a king or queen, or the wife of a prince. Some children like to have princess parties because they get to wear fancy dresses, tiaras, and little plastic high heels. In countries that are monarchies, rulers are born into their positions and are typically called kings and queens.    </Info>\r\n    <Price>Wydad 37</Price>\r\n    </Column>\r\n    </Row>\r\n      \r\n    </Scaffold>\r\n  )\r\n  \r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\nimport { FetchData } from './components/FetchData';\r\nimport { Counter } from './components/Counter';\r\nimport Details from './pages/details';\r\nimport './custom.css'\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render () {\r\n    return (\r\n      <Layout>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/counter' component={Counter} />\r\n        <Route path='/fetch-data' component={FetchData} />\r\n        <Route path='/description' component={Details} />\r\n        \r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}